library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

entity rom_gb is
    port (
        addr: in STD_LOGIC_VECTOR (8 downto 0);
        M: out STD_LOGIC_VECTOR (0 to 7);
        CE: in STD_LOGIC
    );
end rom_gb;

architecture rom_gb of rom_gb is
type rom_array is array (NATURAL range <>)  
               of STD_LOGIC_VECTOR (0 to 7);
constant rom: rom_array := (
x"00",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"00",
x"05",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"00",
x"09",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0e",x"04",
x"09",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0e",x"0e",x"04",
x"09",x"12",x"0e",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0e",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0e",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0e",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0e",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0e",x"0e",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"12",x"0d",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0e",x"0e",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0d",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0e",x"0d",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0d",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"0d",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0d",x"0d",x"0e",x"04",
x"09",x"12",x"0e",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0e",x"0e",x"04",
x"09",x"12",x"0d",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0d",x"0e",x"04",
x"09",x"0e",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0e",x"04",
x"09",x"0d",x"0d",x"0d",x"0d",x"09",x"0d",x"09",x"0d",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"09",x"0d",x"00",
x"00",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"04",x"00",x"00");

begin

  process(addr, CE)
  variable j: integer;
  begin 
    if CE = '1' then
    j := conv_integer(addr);
    M <= rom(j);
  else
  M <= (others => 'Z');
  end if;
  end process;
 
end rom_gb;
